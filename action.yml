---
name: Markdownlint
description: Lints markdown files.

inputs:
  files:
    description: TODO
    required: false
    default: '**.md'

  path:
    description: TODO
    required: false
    default:  ${{ github.workspace }}

  args:
    description: >
      Additional command-line arguments. TODO
    required: false

runs:
  using: "composite"
  steps:
    - name: Run markdownlint-cli
      shell: bash
      id: run
      run: |
        command_failed=0
        echo "IN"
        echo "command_failed: $command_failed"
        npx markdownlint-cli ${{ inputs.args }} -o result.log -- ${{ inputs.files }} || command_failed=1
        echo "out"
        echo "command_failed: $command_failed"
        ls -la
        echo "::set-output name=full::$(cat result.log)"
        cat result.log
        cat result.log | awk -F'\n' '
          {print $0}

          /^[a-zA-Z0-9_\\.\/\-]+:[0-9]+:[0-9]+ MD[0-9]+\/[a-z\-]+ (.*)$/ {
              split($0, arr, " ")
              split(arr[1], part, ":")

              printf "::warning file=%s,line=%s,col=%s::%s %s\n", part[1], part[2], part[3], arr[2], substr($0, length(arr[1])+1+length(arr[2])+1+1)
          }
          
          
          /^[a-zA-Z0-9_\\.\/\-]+:[0-9]+ MD[0-9]+\/[a-z\-]+ (.*)$/ {
              split($0, arr, " ")
              split(arr[1], part, ":")

              printf "::warning file=%s,line=%s::%s %s\n", part[1], part[2], arr[2], substr($0, length(arr[1])+1+length(arr[2])+1+1)
          }'
        echo "outer"

        echo "::set-output name=full::$(cat output.log)"
        exit $command_failed
      working-directory: ${{ inputs.path }}

branding:
  icon:  check-circle
  color: red